TYPEMAP
Pvoid_t T_PVOID
PWord_t T_WORD_PTR
Word_t T_UWORD
Str T_STR

INPUT
T_STR
    ($var.ptr) = SvPV($arg,($var.length))

T_PVOID

    /* It should never, ever happen that I get pointers that could
       suffer truncation because Judy always allocates everything and
       that's at the native size instead of perl's long long. */

    $var = (Pvoid_t)(SvOK($arg) ? (Word_t)SvUV($arg) : 0);

T_WORD_PTR
    /* It should never, ever happen that I get pointers that could
       suffer truncation because Judy always allocates everything and
       that's at the native size instead of perl's long long. */

    $var = INT2PTR($type,SvUV($arg));

T_UWORD
    /* Accept:
       - IV that's negative, coerce to 0 and th
       - IV/UV that fits in (unsigned long int)
       - IV/UV that requires more bits than fit in (unsigned long
         int). Truncate it and throw a warning.
       - Cast everything else to UV and apply the above rules
     */
    if ( SvIOK($arg) && SvIV($arg) < 0 ) {
        warn(\"Coercing %\"IVdf\" to 0\",
             SvIV($arg));
        $var = 0;
    }
    #if (LONGSIZE == UVSIZE)
    else {
        $var = SvUV($arg);
    }
    #else
    else if ( SvUV($arg) > LONG_MAX ) {
        $var = LONG_MAX;
        warn(\"Truncating %\"UVuf\" to %lu\",
             SvUV($arg), LONG_MAX);
    }
    else {
        $var = SvUV($arg);
    }
    #endif
    /* This line added to get the immediately preceding #endif to work
       properly in generated C source. */

OUTPUT
T_STR
    if ( SvOK($arg) ) {
        sv_setpvn($arg, $var.ptr, $var.length ? $var.length : strlen( $var.ptr ));
    }
    else {
        sv_setsv($arg,sv_2mortal(newSVpv($var.ptr, $var.length ? $var.length : strlen( $var.ptr ))));
    }

T_PVOID
    if ( SvOK($arg) ) {
            sv_setiv($arg,PTR2IV($var));
    }
    else {
            /* Handles the case when we're passed an undef */
            sv_setsv($arg,sv_2mortal(newSViv(PTR2IV($var))));
    }

T_UWORD
    if ( SvOK($arg) ) {
        sv_setiv($arg, $var);
    }
    else {
        sv_setsv($arg,sv_2mortal(newSViv($var)));
    }
    

T_WORD_PTR
    if ( SvOK($arg) ) {
        sv_setiv($arg, PTR2IV($var));
    }
    else {
        sv_setsv($arg,sv_2mortal(newSViv(PTR2IV($var))));
    }
