=head1 NAME

Judy::1 macros - Library for creating and accessing a dynamic array of bits, using any value of a word as an index.

=head SYNOPSIS

=head1 DATA TYPES

    int     Rc_int;                          // return code - integer
    Word_t  Rc_word;                         // return code - unsigned word
    Word_t  Index, Index1, Index2, Nth;

=head1 DESCRIPTION

A Judy::1 array is the equivalent of a bit array or bit map. A bit is
addressed by an C<$Index> (key). The array may be sparse, and the C<$Index>
may be any word-sized C<$Value>. If an index is present, it represents a
set bit (a bit set represents an index present). If an index is
absent, it represents an unset bit (a bit unset represents an absent
index).

A Judy::1 array is allocated with a NULL pointer

    my $judy;

Memory to support the array is allocated as bits are set, and released
as bits are unset. If the Judy::1 pointer (C<$Judy>) is 0 or undef,
all bits are unset (and the Judy::1 array requires no memory).

As with an ordinary array, a Judy::1 array contains no duplicate indexes.

The default error handling sends a message to the standard error and
terminates the program with exit(1).



=head1 BASIC FUNCTIONS

=head2 bool = Set( $Judy, $Index )

Set C<$Index>'s bit in the Judy::1 array C<$Judy>.

Return true if the bit was previously unset, false otherwise.

=head2 bool = Unset( $Judy, $Index )

Unset C<$Index>'s bit in the Judy::1 array C<$Judy>; that is, remove C<$Index> from the Judy::1 array.

Return true if the bit was previously set, false otherwise.

=head2 bool = J1T(Rc_int, C<$Judy>, C<$Index>); // Judy::1Test()

Test if C<$Index>'s bit is set in the Judy::1 array C<$Judy>.

Return true if the bit is set, false otherwise.

=head2 count = Count( $Judy, $Key1, $Key2 )

Count the number of indexes present in the Judy::1 array C<$Judy>
between C<$Index>1 and C<$Index>2 (inclusive).

Return the count of indexes set. A return C<$Value> of 0 can be valid
as a count, or it can indicate a special case for fully populated
array (32-bit machines only).

To count all indexes present (population) in a Judy::1 bit array, use:

    $count = Count( $judy, 0, -1 );

Note: The -1 promotes to the maximum index, that is, all ones.

=head2 $Index = Nth( $judy, $Nth )

Locate the c<$Nth> index that is present in the Judy::1 array C<$Judy>
(C<$Nth = 1> returns the first index present). To refer to the last
index in a fully populated array (all indexes present, which is rare),
use C<$Nth = 0>.

Returns nothing if there is not an nth index.

=head2 bytes = Free( $judy )

Free the entire Judy::1 array C<$Judy> (much faster than using a
Next(), Unset() loop).

Returns the number of bytes freed.

=head2 bytes = MemUsed( $judy )

Returns the number of bytes of memory currently in use by Judy::1
array C<$Judy>. This is a very fast routine, and may be used after a
Set() or Unset() call with little performance impact.

=head1 Search Functions

The Judy::1 search functions allow you to search for set or unset bits
in the array. You may search inclusively or exclusively, in either
forward or reverse directions. All of the search functions use a
similar calling sequence. C<$Index> is returned for a sucessful
search, nothing is returned under failure.

=head2 J1F(Rc_int, C<$Judy>, C<$Index>); // Judy::1First()

Search (inclusive) for the first index present that is equal to or
greater than the passed C<$Index>. (Start with C<$Index> = 0 to find
the first index in the array.) J1F() is typically used to begin a
sorted-order scan of the indexes present in a Judy::1 array.

=head2 J1N(Rc_int, C<$Judy>, C<$Index>); // Judy::1Next()

Search (exclusive) for the next index present that is greater than the
passed C<$Index>. J1N() is typically used to continue a sorted-order
scan of the indexes present in a Judy::1 array, or to locate a
"neighbor" of a given index.

=head2 J1L(Rc_int, C<$Judy>, C<$Index>); // Judy::1Last()

Search (inclusive) for the last index present that is equal to or less
than the passed C<$Index>. (Start with C<$Index> = -1, that is, all
ones, to find the last index in the array.) J1L() is typically used to
begin a reverse-sorted-order scan of the indexes present in a Judy::1
array.

=head2 J1P(Rc_int, C<$Judy>, C<$Index>); // Judy::1Prev()

Search (exclusive) for the previous index present that is less than
the passed C<$Index>. J1P() is typically used to continue a
reverse-sorted-order scan of the indexes present in a Judy::1 array,
or to locate a "neighbor" of a given index.

=head2 J1FE(Rc_int, C<$Judy>, C<$Index>); // Judy::1FirstEmpty()

Search (inclusive) for the first absent index that is equal to or
greater than the passed C<$Index>. (Start with C<$Index> = 0 to find
the first index absent in the array.)

=head2 J1NE(Rc_int, C<$Judy>, C<$Index>); // Judy::1NextEmpty()

Search (exclusive) for the next absent index that is greater than the
passed C<$Index>.

=head2 J1LE(Rc_int, C<$Judy>, C<$Index>); // Judy::1LastEmpty()

Search (inclusive) for the last absent index that is equal to or less
than the passed C<$Index>. (Start with C<$Index> = -1 to find the last
index absent in the array.)

=head2 J1PE(Rc_int, C<$Judy>, C<$Index>); // Judy::1PrevEmpty()

Search (exclusive) for the previous absent index that is less than the passed C<$Index>. 

=head1 EXAMPLE

In the following example, errors in the J1S() or J1U() calls go to a
user-defined procedure, process_malloc_failure. This is not needed
when you use the default JUDYERROR() macro, since the default causes
your program to exit on all failures, including malloc() failure.

    use Judy::1 qw( Set Test Unset Count MemUsed );

    my $judy;
    print Set( $judy, 123456 )
        ? "OK - bit successfully set at 123456\n"
        : "BUG - bit already set at 123456\n";

    print Test( $judy, 654321 )
        ? "BUG - set bit at 654321\n"
        : "OK - bit not set at 654321\n";

    my ( $count ) = Count( $judy, 0, -1 );
    print "$count bits set in Judy::1 array\n";

    my ( $index ) = First( $judy, 0 );
    if ( defind $index ) {
        print "OK - first bit set is at $index\n";
    }
    else {
        print "BUG - no bits set in array\n";
    }

    print "$count Indexes used %d bytes of memory\n", MemUsed( $judy );

    print Unset( $judy, 123456 )
        ? "OK - bit successfully unset at 123456\n"
        : "BUG - bit was not unset at 123456\n";

=head1 AUTHOR

Judy was invented by Doug Baskins and implemented by Hewlett-Packard.

Judy::1 the perl wrapper was written by Joshua ben Jore.
